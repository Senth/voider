import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
        classpath 'com.android.tools.build:gradle:1.0.0'
        classpath 'org.robovm:robovm-gradle-plugin:1.0.0-beta-04'
    }
}

allprojects {
    apply plugin: "eclipse"
    
    version = '0-4-10'
    ext {
        appName = 'Voider'
        gdxVersion = '1.5.5-SNAPSHOT'
        roboVMVersion = '1.0.0-beta-04'
        box2DLightsVersion = '1.3'
        ashleyVersion = '1.3.1'
        aiVersion = '1.5.0'
        appengineVersion = '1.9.18'
        spiddekaugaUtilsVersion = '0.1.0-SNAPSHOT'
        appengineUtilsVersion = '0.1.0-SNAPSHOT'
    }

    repositories {
    	mavenLocal()
    	maven { url "http://maven.senth.org/snapshots" }
    	maven { url "http://maven.senth.org/releases" }
        mavenCentral()
    }
    
    tasks.withType(JavaCompile) {
    	options.compilerArgs << "-Xlint:deprecation"
    }
    
    configurations.all {
    	resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

project(":desktop") {
    apply plugin: "java"


    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-sqlite-desktop:0.1"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
    }
}

project(":android") {
    apply plugin: "android"

    configurations { natives }

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-sqlite-android:0.1"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
    }
}

project(":ios") {
    apply plugin: "java"
    apply plugin: "robovm"

    configurations { natives }

    dependencies {
        compile project(":core")
        compile "org.robovm:robovm-rt:${roboVMVersion}"
        compile "org.robovm:robovm-cocoatouch:${roboVMVersion}"
        compile "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-sqlite-robovm:0.1"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-ios"
    }
}

project(":html") {
    apply plugin: "gwt"
    apply plugin: "war"


    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-box2d-gwt:$gdxVersion:sources"
    }
}

project(":core") {
    apply plugin: "java"


    dependencies {
    	compile project(":network")
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        compile "org.ini4j:ini4j:0.5.4"
		compile "edu.gvsu.cis.masl:java-channels-api:0.1"
		compile "com.google.code.gson:gson:2.2.4"
		compile "com.esotericsoftware:kryo:3.0.0"
		compile "com.badlogicgames.gdx:gdx-sqlite:0.1"
		compile "org.apache.httpcomponents:httpmime:4.3.6"
		compile "com.spiddekauga:spiddekauga-utils:$spiddekaugaUtilsVersion"
    }
}

project(":network") {
	apply plugin: "java"
}

project(":server") {
	apply plugin: "java"
	apply plugin: "war"
	
	dependencies {
		providedCompile 'javax.servlet:servlet-api:2.5'
		compile project(":network")
		compile "com.google.code.gson:gson:2.2.4"
		compile "com.spiddekauga.appengine:appengine-utils:$appengineUtilsVersion"
		compile "com.spiddekauga:spiddekauga-utils:$spiddekaugaUtilsVersion"
		compile "commons-fileupload:commons-fileupload:1.3.1"
	}
}

project(":server-analytics") {
	apply plugin: "java"
	apply plugin: "war"
	
	dependencies {
		providedCompile 'javax.servlet:servlet-api:2.5'
		compile "com.spiddekauga.appengine:appengine-utils:$appengineUtilsVersion"
		compile "com.google.appengine.tools:appengine-gcs-client:0.4.4"
		compile "com.google.appengine.tools:appengine-mapreduce:0.8.3"
	}
}

tasks.eclipse.doLast {
    delete ".project"
}

//--------------------------------------------
//				DEPLOYMENT
//--------------------------------------------
task deployNightlyDev << {
	deployBuild "NIGHTLY_DEV"
}

task deployNightlyRelease << {
	deployBuild "NIGHTLY_RELEASE"
}

task deployBeta << {
	deployBuild "BETA"
}

task deployAppengine << {
	// TODO deploy app engine
}

def deployBuild(deployBuild) {
	replaceBuildName "DEV_LOCAL", deployBuild
	
	def dropboxDir = "/home/senth/Dropbox/Voider exec/"
	def copyTo = ""
	switch ( deployBuild ) {
		case "NIGHTLY_DEV":
			copyTo = "Voider - editable resources/Voider2.jar"
			break
		
		case "NIGHTLY_RELEASE":
			copyTo = "Voider/Voider-nightly2.jar"
			break
			
		case "BETA":
			copyTo = "Voider/Voider-beta2.jar"
			break
	}
	
	def desktopFile = projectDir.absolutePath + "/desktop/build/libs/desktop-" + version + ".jar"
	copyTo = dropboxDir + copyTo
	
	project(":desktop").clean.execute()
	project(":desktop").dist.execute()
	
	Files.move(Paths.get(desktopFile), Paths.get(copyTo), StandardCopyOption.REPLACE_EXISTING)
	
	replaceBuildName deployBuild, "DEV_LOCAL"
}

def replaceBuildName(currentBuild, nextBuild) {
	def filename = "core/src/com/spiddekauga/voider/Config.java";
	def fromString = "BUILD = Builds." + currentBuild
	def toString = "BUILD = Builds." + nextBuild
	File configFile = file(filename)
	def updatedContent = configFile.getText('UTF-8').replaceAll(fromString, toString)
	configFile.write(updatedContent, 'UTF-8')
}