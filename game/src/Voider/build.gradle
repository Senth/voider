import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
        classpath 'com.android.tools.build:gradle:1.0.0'
        classpath 'org.robovm:robovm-gradle-plugin:1.0.0-beta-04'
		classpath 'com.google.appengine:gradle-appengine-plugin:1.9.18'
    }
}

// jvmArgs += [ '-XX:MaxPermSize=2G' ]

ext.appengineWebFile = "server/src/main/webapp/WEB-INF/appengine-web.xml"
ext.appengineExplodedWebFile = "server/build/exploded-app/WEB-INF/appengine-web.xml"
ext.defaultBuild = "DEV_LOCAL"

allprojects {
    apply plugin: "eclipse"
    
    version = '0-5-1'
    ext {
        appName = 'Voider'
        gdxVersion = '1.5.5-SNAPSHOT'
        roboVMVersion = '1.0.0-beta-04'
        box2DLightsVersion = '1.3'
        ashleyVersion = '1.3.1'
        aiVersion = '1.5.0'
        appengineVersion = '1.9.18'
        spiddekaugaUtilsVersion = '0.1.0-SNAPSHOT'
        appengineUtilsVersion = '0.1.0-SNAPSHOT'
    }

    repositories {
    	mavenLocal()
    	maven { url "http://maven.senth.org/snapshots" }
    	maven { url "http://maven.senth.org/releases" }
        mavenCentral()
    }
    
    tasks.withType(JavaCompile) {
    	options.compilerArgs << "-Xlint:deprecation"
    }
    
    configurations.all {
    	resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
		resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

project(":desktop") {
    apply plugin: "java"


    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-sqlite-desktop:0.1"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        compile "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
    }
}

project(":android") {
    apply plugin: "android"

    configurations { natives }

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-sqlite-android:0.1"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-armeabi-v7a"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-x86"
    }
}

project(":ios") {
    apply plugin: "java"
    apply plugin: "robovm"

    configurations { natives }

    dependencies {
        compile project(":core")
        compile "org.robovm:robovm-rt:${roboVMVersion}"
        compile "org.robovm:robovm-cocoatouch:${roboVMVersion}"
        compile "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-sqlite-robovm:0.1"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"
        natives "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-ios"
    }
}

project(":html") {
    apply plugin: "gwt"
    apply plugin: "war"


    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-box2d-gwt:$gdxVersion:sources"
    }
}

project(":core") {
    apply plugin: "java"


    dependencies {
    	compile project(":network")
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
        compile "org.ini4j:ini4j:0.5.4"
		compile "edu.gvsu.cis.masl:java-channels-api:0.1"
		compile "com.google.code.gson:gson:2.2.4"
		compile "com.esotericsoftware:kryo:3.0.0"
		compile "com.badlogicgames.gdx:gdx-sqlite:0.1"
		compile "org.apache.httpcomponents:httpmime:4.3.6"
		compile "com.spiddekauga:spiddekauga-utils:$spiddekaugaUtilsVersion"
    }
}

project(":network") {
	apply plugin: "java"

	dependencies {
		compile "com.spiddekauga:spiddekauga-utils:$spiddekaugaUtilsVersion"
	}
}

project(":server") {
	apply plugin: "java"
	apply plugin: "war"
	apply plugin: 'appengine'
	
	dependencies {
		providedCompile 'javax.servlet:servlet-api:2.5'
		compile project(":network")
		compile "com.google.code.gson:gson:2.2.4"
		compile "com.spiddekauga.appengine:appengine-utils:$appengineUtilsVersion"
		compile "com.spiddekauga:spiddekauga-utils:$spiddekaugaUtilsVersion"
		compile "commons-fileupload:commons-fileupload:1.3.1"
	}
}

project(":server-analytics") {
	apply plugin: "java"
	apply plugin: "war"
	apply plugin: 'appengine'
	
	dependencies {
		providedCompile 'javax.servlet:servlet-api:2.5'
		compile "com.google.appengine.tools:appengine-gcs-client:0.4.4"
		compile "com.google.appengine.tools:appengine-mapreduce:0.8.3"
		compile "com.spiddekauga.appengine:appengine-utils:$appengineUtilsVersion"
	}
}

tasks.eclipse.doLast {
    delete ".project"
}

//--------------------------------------------
//				DEPLOYMENT
//--------------------------------------------
task deployGameNightlyDev(dependsOn: ['setBuildNightlyDev', ':core:clean', ':desktop:dist']) << {
	deployGame("NIGHTLY_DEV")
}

task setBuildNightlyDev << {
	replaceBuildName("NIGHTLY_DEV")
}

task deployGameNightlyRelease(dependsOn: ['setBuildNightlyRelease', ':core:clean', ':desktop:dist']) << {
	deployGame("NIGHTLY_RELEASE")
}

task setBuildNightlyRelease << {
	replaceBuildName("NIGHTLY_RELEASE")
}

task deployGameBeta(dependsOn: ['setBuildBeta', ':core:clean', ':desktop:dist']) << {
	deployGame("BETA")
}

task setBuildBeta << {
	replaceBuildName("BETA")
}

task setBuildRelease << {
	replaceBuildName("RELEASE")
}

task deployGameRelease(dependsOn: ['setBuildRelease', 'core:clean', ':desktop:dist']) << {
	deployGame("RELEASE")
}


// Upload to GS
task uploadBetaToGs(type: Exec) {
	def filename = "build/Voider-beta.jar"
	def gsFile = "gs://voider-shared/app/"

	commandLine 'gsutil', 'cp', filename, gsFile
}

// task uploadReleaseToGs(type: Exec) << {
// 	Does nothing yet...
// }

// Ordering
project(':core').compileJava.mustRunAfter setBuildRelease
project(':core').compileJava.mustRunAfter setBuildBeta
project(':core').compileJava.mustRunAfter setBuildNightlyDev
project(':core').compileJava.mustRunAfter setBuildNightlyRelease


// Appengine tasks
task setAppengineDev << {
	updateAppengineVersion()
	updateApplicationId("voider-dev")
}

task setAppengineNightly << {
	updateAppengineVersion()
	updateApplicationId("voider-nightly")
}

task setAppengineBeta() << {
	updateAppengineVersion()
	updateApplicationId("voider-beta")
}

task setAppengineRelease() << {
	updateAppengineVersion()
	updateApplicationId("voider-thegame")
}

task deployAppengineDev(dependsOn: ['setAppengineDev', 'server:appengineUpdate']) << {
	// Does nothing
}

task deployAppengineNightly(dependsOn: ['setAppengineNightly', 'server:appengineUpdate']) << {
	// Does nothing
}

task deployAppengineBeta(dependsOn: ['uploadBetaToGs', 'setAppengineBeta', 'server:appengineUpdate']) << {
	// Does nothing
}

task deployAppengineRelease(dependsOn: ['setAppengineRelease', 'server:appengineUpdate']) << {
	// Does nothing
}


// Ordering
project(':server').appengineUpdate.mustRunAfter setAppengineDev
project(':server').appengineUpdate.mustRunAfter setAppengineBeta
project(':server').appengineUpdate.mustRunAfter setAppengineNightly
project(':server').appengineUpdate.mustRunAfter setAppengineRelease


// Deploy Game to dropbox and other places
def deployGame(buildName) {
	def dropboxDir = "/home/senth/Dropbox/Voider exec/"
	def desktopFile = projectDir.absolutePath + "/desktop/build/libs/desktop-" + version + ".jar"
	def dropboxCopyTo = ""
	def exportFile = projectDir.absolutePath + "/build/";
	switch ( buildName ) {
		case "NIGHTLY_DEV":
			dropboxCopyTo = "Voider - editable resources/Voider.jar"
			break
		
		case "NIGHTLY_RELEASE":
			dropboxCopyTo = "Voider/Voider-nightly.jar"
			break
		
		case "BETA":
			exportFile += "Voider-beta.jar"
			break

		case "RELEASE":
			exportFile += "Voider.jar"
			break
	}

	// Copy to dropbox
	if (dropboxCopyTo != "") {
		dropboxCopyTo = dropboxDir + dropboxCopyTo
		Files.move(Paths.get(desktopFile), Paths.get(dropboxCopyTo), StandardCopyOption.REPLACE_EXISTING)
	}
	// Copy to appengine
	else {
		Files.move(Paths.get(desktopFile), Paths.get(exportFile), StandardCopyOption.REPLACE_EXISTING)
	}
	replaceBuildName(project.defaultBuild)
}

def replaceBuildName(nextBuild) {
	def filename = "core/src/com/spiddekauga/voider/Config.java";
	def fromString = "BUILD = Builds.*;"
	def toString = "BUILD = Builds." + nextBuild + ";"
	File configFile = file(filename)
	def updatedContent = configFile.getText('UTF-8').replaceAll(fromString, toString)
	configFile.write(updatedContent, 'UTF-8')
}

def updateAppengineVersion() {
	def searchFor = "<version>.*</version>"
	def replaceWith = "<version>" + version + "</version>"
	
	File webappFile = file(project.appengineWebFile)
	def updatedContent = webappFile.getText('UTF-8').replaceAll(searchFor, replaceWith)
	webappFile.write(updatedContent, 'UTF-8')
	
	File explodedFile = file(project.appengineExplodedWebFile)
	updatedContent = explodedFile.getText('UTF-8').replaceAll(searchFor, replaceWith)
	explodedFile.write(updatedContent, 'UTF-8')
}

def updateApplicationId(applicationId) {
	def searchFor = "<application>.*</application>"
	def replaceWith = "<application>" + applicationId + "</application>"
	
	File webappFile = file(project.appengineWebFile)
	def updatedContent = webappFile.getText('UTF-8').replaceAll(searchFor, replaceWith)
	webappFile.write(updatedContent, 'UTF-8')
	
	File explodedFile = file(project.appengineExplodedWebFile)
	updatedContent = explodedFile.getText('UTF-8').replaceAll(searchFor, replaceWith)
	explodedFile.write(updatedContent, 'UTF-8')
}
