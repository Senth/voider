import com.badlogicgames.packr.Packr
import groovy.io.FileType

import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
        classpath 'com.android.tools.build:gradle:2.2.2'
        classpath 'org.robovm:robovm-gradle-plugin:1.12.0'
        classpath 'com.google.appengine:gradle-appengine-plugin:1.9.42'
        classpath 'com.badlogicgames.packr:packr:1.2'
    }
}

ext.defaultBuild = "DEV_LOCAL"
ext.home = System.properties['user.home'] + '/'
ext.dropbox = home + 'Dropbox/'
ext.outDir = "${projectDir.absolutePath}/build/"

allprojects {
    version = '0-6-0'
    ext {
        appName = 'Voider'
        kryoVersion = '3.0.1'
        gdxVersion = '1.6.4-SNAPSHOT'
        gdxSqliteVersion = '0.2-SNAPSHOT'
        roboVMVersion = '1.12.0'
        box2DLightsVersion = '1.3'
        ashleyVersion = '1.3.1'
        aiVersion = '1.5.0'
        appengineVersion = '1.9.42'
        commonUtilsVersion = '0.1.0-SNAPSHOT'
        kryoUtilsVersion = '0.1.1'
        appengineUtilsVersion = '0.2.1-SNAPSHOT'
        httpUrlUtilsVersion = '0.3.0'
        jaccVersion = '0.2.3'
        guavaVersion = '19.0-rc2'
    }

    repositories {
        mavenLocal()
        maven { url "http://maven.senth.org/snapshots" }
        maven { url "http://maven.senth.org/releases" }
        jcenter()
        mavenCentral()
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation"
    }

    configurations.all {
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

//--------------------------------------------
//			SYNC - DROPBOX -> GIT
//--------------------------------------------
task dropboxImportUi() << {
    def dropboxAssetDir = project(':internal-resources').projectDir.absolutePath
    def gitRawDir = project(':ui-raw').projectDir.absolutePath

    syncUiRaw(dropboxAssetDir, gitRawDir)
    syncBackgroundsRaw(dropboxAssetDir, gitRawDir)
    syncAssets(dropboxAssetDir)
}

def syncUiRaw(dropboxDir, gitDir) {
    File dropboxDirFile = new File(dropboxDir, 'ui-editable')
    dropboxDirFile.listFiles().each { asset ->
        if (asset.isDirectory()) {
            File dropboxFile = new File(asset.toString())
            File gitFile = new File(gitDir, asset.getName());
            GFileUtils.deleteDirectory(gitFile)
            copyDirRecursively(dropboxFile, gitFile)
        }
    }
}

def syncBackgroundsRaw(dropboxDir, gitDir) {
    File dropboxFile = new File(dropboxDir, 'backgrounds-editable')
    File gitFile = new File(gitDir, 'backgrounds')
    GFileUtils.deleteDirectory(gitFile)
    copyDirRecursively(dropboxFile, gitFile)
}

def syncAssets(dropboxDir) {
    def gitDir = project(':android').projectDir.absolutePath + "/assets/"
    ['backgrounds', 'export', 'fonts', 'gfx', 'music', 'sfx', 'shaders', 'txt', 'ui'].each { asset ->
        File gitFile = new File(gitDir, asset)
        GFileUtils.deleteDirectory(gitFile)
        File dropboxFile = new File(dropboxDir, asset)
        copyDirRecursively(dropboxFile, gitFile)
    }
}

def copyDirRecursively(File dirFrom, File dirTo) {
    // creation the target dir
    if (!dirTo.exists()) {
        dirTo.mkdir();
    }
    // copying the daughter files
    dirFrom.eachFile(FileType.FILES) { File source ->
        File target = new File(dirTo, source.getName());
        target.bytes = source.bytes;
    }
    // copying the daughter dirs - recursion
    dirFrom.eachFile(FileType.DIRECTORIES) { File source ->
        File target = new File(dirTo, source.getName());
        copyDirRecursively(source, target)
    }
}

//--------------------------------------------
//				DEPLOYMENT - GAME
//--------------------------------------------
task deployGameNightlyDev(dependsOn: ['core:setBuildNightlyDev', ':core:clean', ':desktop:dist']) << {
    deployGame("NIGHTLY_DEV")
}

task deployGameNightlyRelease(dependsOn: ['core:setBuildNightlyRelease', ':core:clean', ':desktop:dist']) << {
    deployGame("NIGHTLY_RELEASE")
}

task deployGameBeta(dependsOn: ['core:setBuildBeta', ':core:clean', ':desktop:dist']) << {
    deployGame("BETA")
}

task deployGameRelease(dependsOn: ['core:setBuildRelease', 'core:clean', ':desktop:dist']) << {
    deployGame("RELEASE")
}

// Deploy Game to dropbox and other places
def deployGame2(buildName) {
    def dropboxDir = dropbox + 'Voider/'
    def desktopFile = projectDir.absolutePath + "/desktop/build/libs/desktop-" + version + ".jar"
    def dropboxCopyTo = ""
    def exportDir = projectDir.absolutePath + "/build/";
    def exportFile = ""
    switch (buildName) {
        case "NIGHTLY_DEV":
            dropboxCopyTo = "Voider - editable resources/Voider.jar"
            break

        case "NIGHTLY_RELEASE":
            dropboxCopyTo = "Voider/Voider-nightly.jar"
            break

        case "BETA":
            exportFile = "Voider-beta.jar"
            dropboxCopyTo = "Voider/Voider-beta.jar"
            break

        case "RELEASE":
            exportFile = "Voider.jar"
            break
    }

    // Copy to dropbox
    if (dropboxCopyTo != "") {
        dropboxCopyTo = dropboxDir + dropboxCopyTo
        Files.copy(Paths.get(desktopFile), Paths.get(dropboxCopyTo), StandardCopyOption.REPLACE_EXISTING)
    }
    // Copy to appengine
    if (exportFile != "") {
        exportFile = exportDir + exportFile
        Files.copy(Paths.get(desktopFile), Paths.get(exportFile), StandardCopyOption.REPLACE_EXISTING)
    }
    replaceBuildName(project.defaultBuild)
}

// Deploy Game to dropbox and other places
def deployGame(buildName) {
    def dropboxDir = dropbox + 'Voider/'
    def desktopFile = projectDir.absolutePath + "/desktop/build/libs/desktop-" + version + ".jar"
    def exportDirs = null
    switch (buildName) {
        case "NIGHTLY_DEV":
            exportDirs = ["${dropboxDir}Voider - editable resources/Voider.jar"]
            break

        case "NIGHTLY_RELEASE":
            exportDirs = ["${dropboxDir}Voider/Voider-nightly.jar"]
            break

        case "BETA":
            exportDirs = ["${dropboxDir}Voider/Voider-beta.jar", "${outDir}Voider-beta.jar"]
            packGame(desktopFile, "Voider-beta")
            break

        case "RELEASE":
            exportDirs = ["${dropboxDir}Voider/Voider.jar", "${outDir}Voider.jar"]
            packGame(desktopFile, "Voider")
            break
    }

    exportDirs.each {
        Files.copy(Paths.get(desktopFile), Paths.get(it), StandardCopyOption.REPLACE_EXISTING)
    }
    project(':core').replaceBuildName(project.defaultBuild)
}

def packGame(jar, build) {
    ['windows', 'mac'].each {
        packGame(jar, build, it)
    }
}

def packGame(jar, build, platform) {
//    def packDir = outDir + build + getPlatformExtension(platform)
//
//    Packr.Config config = new Packr.Config();
//    config.platform = getPlatformEnum(platform)
//    config.jdk = dropbox + 'Dev/Libs/' + getPlatformJdk(platform)
//    config.executable = build
//    config.jar = jar // V1.2
//// 	config.classpath = [jar] // V2.0
//    config.mainClass = 'com.spiddekauga.voider.desktop.DesktopLauncher'
//    config.vmArgs = ['-Xmx1G']
//    config.outDir = "${packDir}/${build}" + getPlatformExtension(platform) // ZIP HACK
//// 	config.outDir = packDir // REGULAR
//    config.minimizeJre = [
//            'jre/lib/rt/com/sun/corba',
//            'jre/lib/rt/com/sun/jmx',
//            'jre/lib/rt/com/sun/jndi',
//            'jre/lib/rt/com/sun/media',
//            'jre/lib/rt/com/sun/naming',
//            'jre/lib/rt/com/sun/org',
//            'jre/lib/rt/com/sun/rowset',
//            'jre/lib/rt/com/sun/script',
//            'jre/lib/rt/com/sun/xml',
//            'jre/lib/rt/sun/applet',
//            'jre/lib/rt/sun/corba',
//            'jre/lib/rt/sun/management'
//    ]
//
//    new Packr().pack(config)
//
//    // TODO Create an installation bundle
//    // ZIP file
//    def zipFile = "${outDir}${build}-${platform}.zip"
//    Files.deleteIfExists(Paths.get(zipFile))
//    def ant = new AntBuilder()
//    ant.zip(basedir: packDir, destfile: zipFile)
}

def getPlatformEnum(platform) {
    switch (platform) {
        case 'windows32':
// 			return Packr.Platform.windows32	// V2.0
        case 'windows64':
// 			return Packr.Platform.windows64 // V2.0
        case 'windows':
            return Packr.Platform.windows    // V1.2
        case 'mac':
            return Packr.Platform.mac
        default:
            return null
    }
}

def getPlatformExtension(platform) {
    switch (platform) {
        case 'mac':
            return '.app'
        default:
            return ''
    }
}

def getPlatformJdk(platform) {
    return 'openjdk-latest-icedtea-' + platform + '.zip'
}

//--------------------------------------------
//		DEPLOYMENT - SERVER/APPENGINE
//--------------------------------------------
// Upload to GS
task uploadBetaToGs(type: Exec) {
    def filename = "build/Voider-beta.jar"
    def gsFile = "gs://voider-shared/app/"

    commandLine 'gsutil', 'cp', filename, gsFile
}

// task uploadReleaseToGs(type: Exec) << {
// 	Does nothing yet...
// }

task deployAppengineDev(dependsOn: ['server:setAppengineDev', 'server:appengineUpdate']) << {
    // Does nothing
}

task deployAppengineNightly(dependsOn: ['server:setAppengineNightly', 'server:appengineUpdate']) << {
    // Does nothing
}

task deployAppengineBeta(dependsOn: ['uploadBetaToGs', 'server:setAppengineBeta', 'server:appengineUpdate']) << {
    // Does nothing
}

task deployAppengineRelease(dependsOn: ['server:setAppengineRelease', 'server:appengineUpdate']) << {
    // Does nothing
}

